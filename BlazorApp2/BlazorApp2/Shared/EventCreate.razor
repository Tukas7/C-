@using System.IO;
@using BlazorApp2.Models;
@using BlazorApp2.Services;
<h3>Создать событие</h3>

<EditForm Model="@newWidget" OnValidSubmit="CreateWidget">
    <div class="form-group">
        <label for="title">Название</label>
        <InputText id="title" class="form-control" @bind-Value="@newWidget.Title" />
        <ValidationMessage For="@(() => newWidget.Title)" />
        @if (string.IsNullOrEmpty(newWidget.Title))
        {
            <p class="text-danger">Поле 'Название' не может быть пустым.</p>
        }
    </div>
    <div class="form-group">
        <label for="description">Описание</label>
        <InputText id="description" class="form-control" @bind-Value="@newWidget.Description" />
        <ValidationMessage For="@(() => newWidget.Description)" />
        @if (string.IsNullOrEmpty(newWidget.Description))
        {
            <p class="text-danger">Поле 'Описание' не может быть пустым.</p>
        }
    </div>
    <div class="form-group">
        <label for="eventDate">Дата</label>
        <InputDate id="eventDate" class="form-control" @bind-Value="@newWidget.EventDate" />
        <ValidationMessage For="@(() => newWidget.EventDate)" ErrorMessage="Неверный формат даты. Пожалуйста, введите корректную дату." />
    </div>
    <div class="form-group">
        <label for="widgetImages">Картинка: </label>
        <InputFile id="widgetImages" accept="image/*" multiple="true" max="52428800" OnChange="HandleFileChange" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Создать</button>
        @if (ValidationErrorsExist())
        {
            <p class="text-danger">Пожалуйста, исправьте все ошибки перед созданием события.</p>
        }
    </div>
</EditForm>

@code {
    private EventWidget newWidget = new EventWidget { EventDate = DateTime.Today };
    private List<byte[]> uploadedImages = new List<byte[]>();

    [Inject]
    private IEventWidgetService WidgetService { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }


    private async Task CreateWidget()
    {
        if (!IsValidForm())
        {
            return;
        }

        await WidgetService.AddWidget(newWidget, uploadedImages);
        ClearForm();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private bool IsValidForm()
    {
        return !string.IsNullOrEmpty(newWidget.Title)
            && !string.IsNullOrEmpty(newWidget.Description)
            && newWidget.EventDate != DateTime.MinValue;
    }

    private bool ValidationErrorsExist()
    {
        return !IsValidForm();
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            await using var memoryStream = new MemoryStream();
            await file.OpenReadStream(10485760).CopyToAsync(memoryStream);
            uploadedImages.Add(memoryStream.ToArray());
        }
    }

    private void ClearForm()
    {
        newWidget = new EventWidget();
        uploadedImages.Clear();
    }
}
