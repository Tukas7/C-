// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorApp2.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using BlazorApp2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\_Imports.razor"
using BlazorApp2.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\Shared\CRUDEvents.razor"
using BlazorApp2.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\Shared\CRUDEvents.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\Shared\CRUDEvents.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\Shared\CRUDEvents.razor"
using BlazorApp2.Services;

#line default
#line hidden
#nullable disable
    public partial class CRUDEvents : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 133 "C:\Users\Максим\source\repos\BlazorApp1\BlazorApp2\BlazorApp2\Shared\CRUDEvents.razor"
       
    private List<EventWidget> widgets;
    private EventWidget newWidget = new EventWidget();
    private List<byte[]> uploadedImages = new List<byte[]>();
    private bool showDeleteConfirmation = false;
    private int widgetToDeleteId;
    private EventWidget editedWidget;

    [Inject]
    private IEventWidgetService WidgetService { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Загрузка данных из базы данных
        widgets = await WidgetService.GetAllWidgets();
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var imageStream = file.OpenReadStream();
            using (var memoryStream = new MemoryStream())
            {
                await imageStream.CopyToAsync(memoryStream);
                uploadedImages.Add(memoryStream.ToArray());
            }
        }
    }

    private async Task CreateWidget()
    {
        if (await ValidateWidget(newWidget))
        {
            await WidgetService.AddWidget(newWidget, uploadedImages);
            ClearForm();
            widgets = await WidgetService.GetAllWidgets();
            RefreshPage();
        }
    }

    public async Task UpdateWidget(EventWidget widget, List<byte[]> images)
    {
        var widgetToUpdate = await WidgetService.GetWidgetById(widget.Id);
        if (widgetToUpdate != null)
        {
            // Обновление только описания и даты
            widgetToUpdate.Title = widget.Title;
            widgetToUpdate.Description = widget.Description;
            widgetToUpdate.EventDate = widget.EventDate;

            if (images.Count > 0)
            {
                // Обновление картинок, если были выбраны новые изображения
                widgetToUpdate.Images = images;
            }

            await WidgetService.UpdateWidget(widgetToUpdate, images);
            widgets = await WidgetService.GetAllWidgets();
            RefreshPage();
        }
    }

    private async Task DeleteWidget()
    {
        await WidgetService.DeleteWidget(widgetToDeleteId);
        widgets.RemoveAll(w => w.Id == widgetToDeleteId);
        showDeleteConfirmation = false;
        RefreshPage();
    }

    private void EditWidget(int widgetId)
    {
        editedWidget = widgets.FirstOrDefault(w => w.Id == widgetId);
        // Сохраняем список изображений в отдельной переменной
        uploadedImages = new List<byte[]>(editedWidget.Images);
    }


    private void ShowDeleteConfirmation(int id)
    {
        widgetToDeleteId = id;
        showDeleteConfirmation = true;
    }

    private async Task<bool> ValidateWidget(EventWidget widget)
    {
        var validationContext = new ValidationContext(widget);
        var validationResults = new List<ValidationResult>();

        if (!Validator.TryValidateObject(widget, validationContext, validationResults, true))
        {
            foreach (var validationResult in validationResults)
            {
                var propertyNames = validationResult.MemberNames.Any()
                    ? validationResult.MemberNames
                    : new string[] { null };

                foreach (var propertyName in propertyNames)
                {
                    var errorKey = propertyName != null
                        ? $"{propertyName}"
                        : "";

                    var errorMessage = validationResult.ErrorMessage;
                    
                }
            }

            return false;
        }

        return true;
    }

    private void ClearForm()
    {
        newWidget = new EventWidget();
        uploadedImages.Clear();
    }


    private void CancelEdit()
    {
        editedWidget = null;
        uploadedImages.Clear();
    }

    private void RefreshPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
